worker_processes auto;

events {
    worker_connections 1024;
}

http {
    include mime.types;

    # Logging
    error_log /var/log/nginx/error.log warn;
    access_log /var/log/nginx/access.log;

    # Rate limit zone â€” 60 reqs/minute per IP
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=1r/s;

    # Real IP Configuration
    set_real_ip_from 0.0.0.0/0;  # Adjust this to specify trusted proxy IPs
    real_ip_recursive on;
    real_ip_header X-Forwarded-For;
    limit_req_zone $binary_remote_addr zone=mylimit:10m rate=10r/s;

    upstream backend_app {
        server garage_backend:8000;  # Using service name for backend
    }

    upstream frontend_server {
        server garage_front:5173;    # Using service name for frontend
        # Note: Add location block to use this if needed.
    }

    server {
        listen 443 ssl;
        server_name ${AWS_IP};  # Using environment variable for public IP

        ssl_certificate /home/naruto/nginx-certs/mycert.crt;
        ssl_certificate_key /home/naruto/nginx-certs/mycert.key;

        # SSL best practices
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 1d;
        ssl_session_tickets off;

        # Serve static files
        location /static/ {
            alias /home/app/web/static/;
            expires 1y;
            access_log off;
            add_header Cache-Control "public";
        }

        # Serve media files
        location /media/ {
            alias /home/app/web/media/;
            expires 1d;
            access_log off;
            add_header Cache-Control "public";
        }

        # Reverse proxy to backend app
        location / {
            limit_req zone=api_limit burst=10 nodelay;
            proxy_pass http://backend_app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    server {
        listen 80;
        server_name ${AWS_IP};  # Using environment variable for server_name

        location / {
            return 301 https://$host$request_uri;
        }
    }
}
